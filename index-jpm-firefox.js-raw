/* The background process for Firefox when built with JPM */

"SPECIAL NOTE" /* 
    This file must be "compiled from both this one and src/background.js"
*/

/* 
For reference, look at https://github.com/darthkrallt/AO3rdr/blob/5b9d1239cb5ccd9a6ebd68ea409a0c5b885db4e2/lib/main.js
    Need:
    - storage interface
    - port listener
    - images nonsense
    Key differences:
    - broadcast/listen all CANNOT work the same way. Only port messaging.
    - ficdict is still in use!
    - need to attach workers on launch
    - settings page (settingsclick) needs manual attachment of scripts

    Storage:
    - prefs: dictionary of preferences
    - ficdict: dictionary of fics
*/

// var data = require('sdk/self').data; // I do NOT think this was ever used....
var self = require("sdk/self");
var simpleStorage = require('sdk/simple-storage');
var pageMod = require("sdk/page-mod");
var pageWorker = require("sdk/page-worker");
var tabs = require("sdk/tabs");
var system = require("sdk/system");


var workerList = [];


var images = {
    'star-0':self.data.url('./images/star-0.svg'),
    'star-1':self.data.url('./images/star-1.svg'),
    'star-3':self.data.url('./images/star-3.svg'),
    'star-5':self.data.url('./images/star-5.svg'),
    'star-1-fill':self.data.url('./images/star-1-fill.svg'),
    'star-3-fill':self.data.url('./images/star-3-fill.svg'),
    'star-5-fill':self.data.url('./images/star-5-fill.svg'),
    'hidden':self.data.url('./images/hidden.svg'),
    'dislike':self.data.url('./images/dislike.svg'),
    'dislike-fill':self.data.url('./images/dislike-fill.svg'),
    'delete':self.data.url('./images/delete.svg'),
    'delete-fill':self.data.url('./images/delete-fill.svg'),
    'menu':self.data.url('./images/menu.svg'),
    'flag':self.data.url('./images/flag.svg'),
    'unread':self.data.url('./images/unread.svg'),
    'read':self.data.url('./images/read.svg'),
    'bookmark':self.data.url('./images/bookmark.svg'),
    'bookmark-fill':self.data.url('./images/bookmark-fill.svg'),
};


// Initialize the storage if none exists
if (!simpleStorage.storage.ficdict)
    simpleStorage.storage.ficdict = {};

if (!simpleStorage.storage.prefs)
    // autofilter is enabled by default
    simpleStorage.storage.prefs = {
        'autofilter': true, 
        'tags': [], 
        'last_sync':0, 
        'sync_enabled':true
    };

function detachWorker(worker, workerArray) {
  var index = workerArray.indexOf(worker);
  if(index != -1) {
    workerArray.splice(index, 1);
  }
}

/*
    "message" is a dictionary formatted like this:
        {'message': message, 'data': data, 'data_type': data_type}
    only the 'message' field is mandatory
*/
function broadcast(message){
    for (var i in workerList){
        var worker = workerList[i];
        worker.port.emit('message', message);
    }
}

/*
    callbackMessage is intended to do port message passing as a callback
        You have to call this twice to get it to send, first with the port,
        second with the data you want to send
*/
var callbackMessage = (function(port){
    return function(message, data, data_type) {
        port.emit('message', {'message': message, 'data': data, 'data_type': data_type});
    };
});

/*
    This is a way to make simple storage look like chrome storage.

    WARNING: Key difference!
        Firefox is still keeping things in the ficdict, instead of
            individual items
        ex: simpleStorage.storage.ficdict 
*/
var storage = {
    // expects the callback to be passed an object matching
    // {key: STUFF}
    get: function(key, callback) {
        var simpleStorage = require('sdk/simple-storage');
        var out = {};

        if (arguments.length === 1){
            // Fetch ALL data, pass to callback.
            callback = key;
            out['prefs'] = simpleStorage.storage['prefs'];
            var ficdict = simpleStorage.storage['ficdict'];
            for (var key in ficdict) {
                out[key] = ficdict[key];
            }
        } else {
            if (key == 'prefs')
                out[key] = simpleStorage.storage[key];
            else {
                var ficdict = simpleStorage.storage['ficdict'];
                out[key] = ficdict[key];
            }
        }
        if (typeof callback == 'function'){
            callback(out);
        }
    },
    // I don't know if there's a callback for set...
    // for every key passed in to set, set it in simplestorage
    set: function(dictionary) {
        var simpleStorage = require('sdk/simple-storage');    
        for (var key in dictionary) {
            if (dictionary.hasOwnProperty(key)) {
                if (key == 'prefs')
                    simpleStorage.storage[key] = dictionary[key];
                else
                    simpleStorage.storage['ficdict'][key] = dictionary[key];
            }
        }
    }
};


function onAttachFun(worker) {
    /* This function contains logic for handling all incoming messages. */
    worker.postMessage('test message');
    workerList.push(worker);
    worker.on('detach', function () {
        detachWorker(this, workerList);
    });

    worker.port.on('settingsclick', function() {
        tabs.open({url: self.data.url('./settings/index.html'), /*onReady: settingsPageReady*/});
    });
    worker.port.on('message', function(args) {
        // You may also pass data as a second argument to 'emit'
        worker.port.emit('test outgoing message');
    });
    worker.port.on('reveal-token', function() {
        getUser(callbackMessage(worker.port));
    });
    worker.port.on('save-token', function(request) {
        validateAndSaveToken(request.data, worker.port);
    });
    worker.port.on('prefs', function(request) {
        savePrefs(request.data);
    });
    worker.port.on('fetchdata', function(request) {
        fetchDataRequest(request, worker.port);
    });
    worker.port.on('restorefrombackup', function(request) {
        restoreFromBackup(request);
    });
    worker.port.on('ficdata', function(request) {
        handleNewFic(request.data.metadata, request.data.mutable_data, worker.port);
    });
    worker.port.on('runsync', function() {
        runSync();
    });
}


// Create a page mod
// It will run a script whenever a ".org" URL is loaded
// The script replaces the page contents with a message

// Modify the pages of AO3 to show the addon stuff. Also attaches the workers who
// do the message passing.
var setupAO3 = pageMod.PageMod({
    include: ["http://archiveofourown.org/*", "https://archiveofourown.org/*",],
    contentScriptWhen: 'ready',
    contentScriptFile: [
        self.data.url('./../lib/jquery-1.11.2.min.js'),
        self.data.url("./../src/toolbar-ao3.js"),
        self.data.url("./../src/toolbar-content.js"),
        self.data.url("./../src/toolbar-jpm-firefox.js"),
        self.data.url("./../src/ao3lib.js"),
    ],
    contentScriptOptions: {"images" : images},
    contentStyleFile: self.data.url('./style.css'),
    // We actually want this on any page load of the site
    onAttach: onAttachFun,
});


var setupSettings = pageMod.PageMod({
    include: ["resource://ao3rdr/data/settings/index.html"],
    contentScriptWhen: 'ready',
    contentScriptFile: [
            self.data.url('./../lib/jquery-1.11.2.min.js'),
            self.data.url('./settings/jquery.tagsinput.js'),
            self.data.url('./../lib/DataTables-1.10.7/media/js/jquery.dataTables.js'),
            self.data.url('./../lib/html2dom.js'),
            self.data.url('./../lib/ddSlick.js'),
            self.data.url('./../lib/spin.js'),
            self.data.url('./../lib/DataTables-1.10.7/plugins/alt-string.js'),
            self.data.url("./settings/articles-table-lib.js"),
            self.data.url("./settings/articles-table-jpm-firefox.js"),
            self.data.url("./settings/articles-table-content.js"),
            self.data.url("./settings/articles-table.js"),
    ],
    contentScriptOptions: {"images" : images},
    contentStyleFile: self.data.url('./style.css'),
    // We actually want this on any page load of the site
    onAttach: onAttachFun,
});

/* Backend sync - WARNING: highly duplicated code! */

var Request = require("sdk/request").Request;


function fetchPrefs(){
    return simpleStorage.storage.prefs;
}

function getUserSynchronous(){
    var prefs = fetchPrefs();
    if (!('user_id' in prefs)){
        newUser(); // WARNING: this is async, will take some time to complete.
    }
    return prefs['user_id'];
}


function exportData(){
    var out = {
        'article_data': simpleStorage.storage.ficdict,
        'version': '1.0.0',
        'prefs': fetchPrefs(),
    };
    return out;
}


function newUser(){
    var newUserId = Request({
        // Must be a post()
        url: backendUrl + "user",
        onComplete: function (response) {
            // Save user
            if (response.status == 201){
                var user_id = response.json['user_id'];
                savePrefs({'user_id': user_id});
            }
        }
    });

    newUserId.post();
}

function validateAndSaveToken(token, port){

    var checkToken = Request({
        // Must be a get()
        // user/<string:user_id>
        url: backendUrl + 'user/' + token,
        contentType: 'application/json',
        onComplete: function (response) {
            // Merge data here
            if ((response.status == 200) && ('user_id' in response.json)){
                var user_id = response.json['user_id'];
                savePrefs({'user_id': response.json['user_id'] });
                broadcast({
                    message: 'token-saved', 
                    data: {'token_status': 'valid', user_id: user_id}
                });
                // Pass in new token to be sure against race conditions
                syncData(user_id, port);
            } else {
                broadcast({
                    message: 'token-saved', 
                    data: {'token_status': 'invalid'}
                });
            }
        }
    });
    var res = checkToken.get();
}

function syncWork(data){
    var user_id = getUserSynchronous();
    if ((!data.ao3id) || (!user_id) || (!fetchPrefs()['sync_enabled'])){
        return;
    }

    var sendData = Request({
        // Must be a post()
        url: backendUrl + 'user/' + user_id + "/work/" + data['ao3id'],
        content: JSON.stringify(data),
        contentType: 'application/json',
        onComplete: function (response) {
            console.log('syncwork ' + response.status + ' ' + JSON.stringify(response.json));
            // Merge data here
            if ((response.status == 200) || (response.status == 201)){
                var diff = response.json['diff'];
                // Iterate through the dictionary of changed articles and update our DB
                // the key is the work ID
                // Also contains the settings!
                if ('user_id' in diff)
                    delete diff['user_id'];
                if (Object.keys(diff).length === 0){
                    diff['ao3id'] = data['ao3id'];
                    saveArticle(diff, true, null, false);
                }
            }
        }
    });
    sendData.post();
}


function syncData(){
    // Grab all data
    var user_id = getUserSynchronous();
    if ((!user_id) || (!fetchPrefs()['sync_enabled'])){
        return;
    }

    var data = exportData();

    var sendData = Request({
        // Must be a post()
        url: backendUrl + 'user/' + user_id + "/collection",
        content: JSON.stringify(data),
        contentType: 'application/json',
        onComplete: function (response) {
            // Merge data here
            console.log('syncdata ' + response.status + ' ' + response.json);
            if ((response.status == 200) || (response.status == 201)){
                var diff = response.json['diff'];
                // Iterate through the dictionary of changed articles and update our DB
                // the key is the work ID
                // Also contains the settings!
                for (var key in diff) {
                    if (diff.hasOwnProperty(key)) {
                        if (key == 'settings'){
                            // TODO: update the settings
                        } else if (key == 'user_id'){
                            ; // You can safely ignore
                        } else {
                            var article = diff[key];
                            if ('user_id' in article){
                                delete article['user_id'];
                            }
                            if (!(Object.keys(article).length === 0)){
                                article['ao3id'] = key;
                                saveArticle(article, true, port, false)
                            }
                        }
                    }
                }
                savePrefs({'last_sync': new Date().getTime() / 1000});
            }
        }
    });
    sendData.post();
}
